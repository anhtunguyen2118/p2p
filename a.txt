(async () => {
  'use strict';

  // === CONFIG counter (Google Apps Script) ===
  const BASE = "https://script.google.com/macros/s/AKfycbx8LFQdItW49gFj1xcTRSHPnpxP08Anw4QlHrxUx6AsVNd7quSRXe2Fj3RhGWvochsw/exec";
  const KEY  = "count";
  const THRESHOLD = 15; // kh·ªüi ƒë·ªông khi current < 15; n·∫øu > 15 th√¨ d·ª´ng

  // -- helpers --
  const sleep = ms => new Promise(r => setTimeout(r, ms));

  async function getCount() {
    try {
      const r = await fetch(`${BASE}?key=${encodeURIComponent(KEY)}`);
      const j = await r.json();
      return Number(j.count) || 0;
    } catch {
      // n·∫øu l·ªói ƒë·ªçc, cho l√† 0 (gi·ªØ nguy√™n nh∆∞ tr∆∞·ªõc)
      return 0;
    }
  }

  async function incrementCounter() {
    try {
      const r = await fetch(`${BASE}?key=${encodeURIComponent(KEY)}`, { method: 'POST' });
      const j = await r.json().catch(() => ({}));
      console.log('+1 ', j.count ?? '');
    } catch (e) {
      console.warn('counter error', e);
    }
  }

  function normalizeHref(el) {
    const raw = el.getAttribute('href') || el.href || '';
    try { return new URL(raw, location.href).href; } catch { return raw; }
  }

  function findPaymentAnchor() {
    return [...document.querySelectorAll('a[href]')].find(a => {
      const t = (a.textContent || '').replace(/\s+/g, ' ').trim();
      return t.includes('T√¥i mu·ªën thanh to√°n l·ªánh n√†y');
    });
  }

  function findStatusAnchors() {
    return [...document.querySelectorAll('a[href]')].filter(a => {
      const t = (a.textContent || '').replace(/\s+/g, ' ').trim();
      return t.includes('Thanh Sinh') && t.includes('ƒëang thanh to√°n');
    });
  }

  let running = true;
  window.stopPaymentTool = () => { running = false; console.warn('‚õî stopped manually'); };

  async function run(current) {
    while (running) {
      try {
        // 1) T√¨m n√∫t & l·∫•y href tr∆∞·ªõc khi click
        const paymentAnchor = findPaymentAnchor();

        if (paymentAnchor) {
          const origHref = normalizeHref(paymentAnchor);
          // console.log('üîó HREF tr∆∞·ªõc khi click:', origHref);

          // 2) Click n√∫t
          paymentAnchor.click();
          console.log('‚úÖ ƒê√£ thao t√°c ƒë∆°n th√†nh c√¥ng');

          // 3) Nh·∫•n Enter 10 l·∫ßn, c√°ch nhau 30ms
          for (let i = 0; i < 10; i++) {
            const enterEvent = new KeyboardEvent('keydown', {
              key: 'Enter', code: 'Enter', keyCode: 13, which: 13, bubbles: true
            });
            (document.activeElement || document.body).dispatchEvent(enterEvent);
            await sleep(20);
          }

          // 4) Ch·ªù 2s r·ªìi ki·ªÉm tra tr·∫°ng th√°i
          await sleep(3000);

          // 5) T√¨m anchors "Thanh Sinh ... ƒëang thanh to√°n"
          const statusAnchors = findStatusAnchors();

          // 6) So s√°nh href: CH·ªà khi tr√πng m·ªõi +1
          const matched = statusAnchors.some(a => normalizeHref(a) === origHref);

          if (matched) {
            // console.log('‚úÖ Kh·ªõp href v·ªõi "Thanh Sinh ... ƒëang thanh to√°n" ‚Üí +1');
            await incrementCounter();      // g·ª≠i +1 l√™n Apps Script

            // üîÅ L·∫§Y L·∫†I current T·ª™ SHEET (KH√îNG c·ªông tay n·ªØa)
            current = await getCount();

            // 7) Ki·ªÉm tra ng∆∞·ª°ng sau khi c·∫≠p nh·∫≠t current
            if (current > THRESHOLD) {
              console.error('ƒê√£ l·∫•y ƒë·ªß ƒë∆°n h√¥m nay, ƒëang d·ª´ng....');
              running = false;
              break; // d·ª´ng tool
            }
          } else {
            // console.log('‚ÑπÔ∏è Kh√¥ng kh·ªõp href ho·∫∑c ch∆∞a th·∫•y tr·∫°ng th√°i "Thanh Sinh ... ƒëang thanh to√°n".');
          }

          // 8) L·∫∑p l·∫°i sau 2s nh∆∞ c≈©
          await sleep(2000);

        } else {
          console.log('ƒêang ch·ªù ƒë∆°n...');
          await sleep(100);
        }
      } catch {
        // im l·∫∑ng, ti·∫øp t·ª•c v√≤ng l·∫∑p
      }
    }
  }

  // === GATE kh·ªüi ƒë·ªông: ch·ªâ ch·∫°y n·∫øu current ban ƒë·∫ßu < 15 ===
  let current = await getCount();
  if (current <= THRESHOLD) {
    run(current);
  } else {
    console.error('ƒê√£ l·∫•y ƒë·ªß ƒë∆°n h√¥m nay, ƒëang d·ª´ng....');
  }
})();
